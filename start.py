import logging
from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes
)
import requests
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "1"
GOOGLE_SCRIPT_URL = "1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(MAIN_MENU, QUIZ_ATMOSPHERE, QUIZ_COMPANY,
 QUIZ_CREATION, CLASS_PICK, DATE_PICK,
 CUSTOM_DATE, PHONE, FAQ) = range(9)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEXTS = {
    'welcome': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlassBaker! üé®\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    'classes': "–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:",
    'class_details': "**{name}**\n\n{description}\n\n–î–∞—Ç—ã: {dates}",
    'date_prompt': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
    'custom_date_prompt': "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
    'phone_prompt': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789:",
    'invalid_phone': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +79123456789:",
    'invalid_date': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
    'booking_success': (
        "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        "–ö–ª–∞—Å—Å: {class_name}\n"
        "–î–∞—Ç–∞: {date}\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    ),
    'faq': (
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "1. –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å—å'\n"
        "2. –ú–æ–∂–Ω–æ —Å –¥–µ—Ç—å–º–∏?\n- –î–∞, –µ—Å—Ç—å —Å–µ–º–µ–π–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã"
    ),
    'operator_request': "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!"
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_KEYBOARD = ReplyKeyboardMarkup([
    ["üé® –û –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö", "üéØ –ë—ã—Å—Ç—Ä—ã–π –∫–≤–∏–∑"],
    ["üìÖ –ó–∞–ø–∏—Å—å", "‚ùì FAQ"],
    ["üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä"]
], resize_keyboard=True)

# –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
CLASSES = {
    "lampwork": {
        "name": "Lampwork (–±—É—Å–∏–Ω—ã –≤ –æ–≥–Ω–µ)",
        "description": "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö –±—É—Å–∏–Ω –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –æ–≥–Ω–µ. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.",
        "dates": ["20.03.2025", "25.03.2025"]
    },
    "tiffany": {
        "name": "–í–∏—Ç—Ä–∞–∂ ¬´–¢–∏—Ñ—Ñ–∞–Ω–∏¬ª",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ç—Ä–∞–∂–µ–π –≤ —Ç–µ—Ö–Ω–∏–∫–µ –¢–∏—Ñ—Ñ–∞–Ω–∏.",
        "dates": ["22.03.2025", "27.03.2025"]
    },
    "fusing": {
        "name": "–§—å—é–∑–∏–Ω–≥",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏–π –∏–∑ —Å—Ç–µ–∫–ª–∞ –º–µ—Ç–æ–¥–æ–º —Å–ø–µ–∫–∞–Ω–∏—è.",
        "dates": ["21.03.2025", "26.03.2025"]
    },
    "family": {
        "name": "–°–µ–º–µ–π–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã",
        "description": "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏.",
        "dates": ["23.03.2025", "28.03.2025"]
    }
}


def create_classes_keyboard():
    return [
        [InlineKeyboardButton(cls['name'], callback_data=f"class_{id}")]
        for id, cls in CLASSES.items()
    ] + [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_main")]]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(TEXTS['welcome'], reply_markup=MAIN_KEYBOARD)
    elif update.callback_query:
        await update.callback_query.message.reply_text(TEXTS['welcome'], reply_markup=MAIN_KEYBOARD)
    return MAIN_MENU


async def show_classes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = create_classes_keyboard()
    markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        query = update.callback_query
        try:
            await query.edit_message_text(
                TEXTS['classes'],
                reply_markup=markup
            )
        except Exception as e:
            if "not modified" in str(e):
                await query.answer()
                return CLASS_PICK
    else:
        await update.message.reply_text(
            TEXTS['classes'],
            reply_markup=markup
        )

    return CLASS_PICK


async def class_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back_main":
        try:
            await query.edit_message_text(
                TEXTS['welcome'],
                reply_markup=MAIN_KEYBOARD
            )
        except Exception as e:
            if "not modified" in str(e):
                await query.answer()
        return MAIN_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É "class_<id>"
    if not query.data.startswith("class_"):
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return CLASS_PICK

    class_id = query.data.split("_")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ class_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ CLASSES
    if class_id not in CLASSES:
        await query.answer("–û—à–∏–±–∫–∞: –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return CLASS_PICK

    cls = CLASSES[class_id]
    context.user_data['class'] = class_id

    new_text = TEXTS['class_details'].format(
        name=cls['name'],
        description=cls['description'],
        dates=', '.join(cls['dates'])
    )

    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"book_{class_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_classes")]
    ]

    try:
        await query.edit_message_text(
            new_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "not modified" in str(e):
            await query.answer()

    return CLASS_PICK


async def book_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    class_id = query.data.split("_")[1]
    cls = CLASSES[class_id]
    context.user_data['class'] = class_id

    keyboard = [
        [KeyboardButton(date) for date in cls['dates']],
        [KeyboardButton("–°–≤–æ—è –¥–∞—Ç–∞")]
    ]

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=TEXTS['date_prompt'],
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DATE_PICK


async def handle_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if user_input == "–°–≤–æ—è –¥–∞—Ç–∞":
        await update.message.reply_text(
            TEXTS['custom_date_prompt'],
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )
        return CUSTOM_DATE

    context.user_data['date'] = user_input
    await update.message.reply_text(
        TEXTS['phone_prompt'],
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return PHONE


async def handle_custom_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if user_input == "–ù–∞–∑–∞–¥":
        return await show_classes(update, context)

    try:
        datetime.strptime(user_input, "%d.%m.%Y")
        context.user_data['date'] = user_input
        await update.message.reply_text(
            TEXTS['phone_prompt'],
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )
        return PHONE
    except ValueError:
        await update.message.reply_text(TEXTS['invalid_date'])
        return CUSTOM_DATE


async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    if user_input == "–ù–∞–∑–∞–¥":
        return await show_classes(update, context)

    if not re.fullmatch(r'^\+7\d{10}$', user_input):
        await update.message.reply_text(TEXTS['invalid_phone'])
        return PHONE

    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        response = requests.post(
            GOOGLE_SCRIPT_URL,
            data={
                'timestamp': timestamp,
                'name': update.message.from_user.first_name,
                'phone': user_input,
                'class': CLASSES[context.user_data['class']]['name'],
                'date': context.user_data['date']
            }
        )

        if response.status_code != 200:
            raise Exception(f"HTTP Error: {response.status_code}")

        if "success" not in response.text.lower():
            raise Exception("Google Script Error: " + response.text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return MAIN_MENU

    await update.message.reply_text(
        TEXTS['booking_success'].format(
            class_name=CLASSES[context.user_data['class']]['name'],
            date=context.user_data['date'],
            phone=user_input
        ),
        reply_markup=MAIN_KEYBOARD
    )
    return MAIN_MENU


async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        ["–°–ø–æ–∫–æ–π–Ω–∞—è", "–í–µ—Å—ë–ª–∞—è"],
        ["–Ø—Ä–∫–∞—è", "–ë—ã—Å—Ç—Ä–∞—è"],
        ["–ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)
    await update.message.reply_text("–ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–∞–º –±–ª–∏–∂–µ?", reply_markup=keyboard)
    return QUIZ_ATMOSPHERE


async def quiz_atmosphere(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        await start(update, context)
        return MAIN_MENU

    context.user_data['atmosphere'] = update.message.text
    keyboard = ReplyKeyboardMarkup([
        ["–û–¥–∏–Ω", "–° –¥—Ä—É–≥–æ–º"],
        ["–°–µ–º—å—è", "–ì—Ä—É–ø–ø–∞"],
        ["–ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)
    await update.message.reply_text("–° –∫–µ–º –≤—ã –ø—Ä–∏–¥—ë—Ç–µ?", reply_markup=keyboard)
    return QUIZ_COMPANY


async def quiz_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        return await start_quiz(update, context)

    context.user_data['company'] = update.message.text
    keyboard = ReplyKeyboardMarkup([
        ["–£–∫—Ä–∞—à–µ–Ω–∏–µ", "–í–∏—Ç—Ä–∞–∂"],
        ["–ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å"],
        ["–ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=keyboard)
    return QUIZ_CREATION


async def quiz_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        return await quiz_atmosphere(update, context)

    recommended = "tiffany" if "–í–∏—Ç—Ä–∞–∂" in update.message.text else "lampwork"
    context.user_data['class'] = recommended
    cls = CLASSES[recommended]

    keyboard = [
        [KeyboardButton(date) for date in cls['dates']],
        [KeyboardButton("–°–≤–æ—è –¥–∞—Ç–∞"), KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    await update.message.reply_text(
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: {cls['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return DATE_PICK


async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        TEXTS['faq'],
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return FAQ


async def operator_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(TEXTS['operator_request'], reply_markup=MAIN_KEYBOARD)
    return MAIN_MENU


def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex(r'^(üé® –û –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö|üìÖ –ó–∞–ø–∏—Å—å)$'), show_classes),
                MessageHandler(filters.Regex('^üéØ –ë—ã—Å—Ç—Ä—ã–π –∫–≤–∏–∑$'), start_quiz),
                MessageHandler(filters.Regex('^‚ùì FAQ$'), faq_handler),
                MessageHandler(filters.Regex('^üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä$'), operator_handler),
            ],
            CLASS_PICK: [
                CallbackQueryHandler(class_details, pattern=r'^class_'),
                CallbackQueryHandler(book_class, pattern=r'^book_'),
                CallbackQueryHandler(start, pattern=r'^back_main'),
                CallbackQueryHandler(show_classes, pattern=r'^back_classes'),
            ],
            DATE_PICK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date),
            ],
            CUSTOM_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_date),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), show_classes)
            ],
            PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), show_classes)
            ],
            QUIZ_ATMOSPHERE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_atmosphere),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), start)
            ],
            QUIZ_COMPANY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_company),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), start_quiz)
            ],
            QUIZ_CREATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_creation),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), quiz_atmosphere)
            ],
            FAQ: [
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), start)
            ]
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
